---
alwaysApply: true
globs: *.ts,*.tsx
description: TypeScript高精度ルール（命名/型付け/制御フロー/コメント/フォーマット）
---

# TypeScript 高精度ルール

## 命名
- 短い識別子を避け、意味のある名称を用いる（1-2文字名禁止）
- 関数は動詞/動詞句、変数は名詞/名詞句
- 省略語より完全な語を優先（`genYmdStr` → `generateDateString`）
- 条件の意味を変数で表現して可読性を向上

## 型付け
- 公開APIは明示的な型注釈を付ける。ローカルの自明な変数は型推論を活用
- `any`の使用禁止。やむを得ない場合は限定スコープで代替型（`unknown`, ジェネリクス, ユニオン）を検討
- Nullableは意図を明示（`string | null`を許容する理由を設計で担保）
- 型変換は安全なガードを用いる。`as`多用を避け、型守衛/ユーザー定義タイプガードを使う

## 制御フロー
- 早期returnのガード節を用い、ネストを2-3段以内に保つ
- 例外は握りつぶさない。意味のあるハンドリング/再throw/失敗戻り値を返す
- 非同期関数ではエラー境界を明確化し、呼び出し側の責務を定義

## コメント
- 自明な処理へのコメントは不要。必要時のみ「なぜ」を説明
- 関数・公開APIにはJSDocを付与し、引数・返却・例外を記載
- TODOは避け、実装する（課題はIssue管理）

## フォーマット
- 既存のプロジェクトスタイルに合わせる（Prettier/ESLint設定に従う）
- 1行が長くなる場合は改行し、可読性を優先
- 無関係なリフォーマットは行わない

## 参考
- [TypeScript Handbook](https://www.typescriptlang.org/docs/handbook/intro.html)
- [tsconfig リファレンス](https://www.typescriptlang.org/tsconfig)

